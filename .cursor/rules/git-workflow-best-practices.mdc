---
description: "Git工作流和版本管理最佳实践，基于EZ Logger项目经验"
globs: "*.git*,CHANGELOG.md"
---

# Git工作流和版本管理最佳实践

基于EZ Logger项目开发过程中的经验教训。

## 🌿 分支管理策略

### 主分支保护
```bash
# master分支始终保持稳定可发布状态
# 所有功能开发都在特性分支进行

# ✅ 正确的工作流
git checkout -b feature/unity-package-fixes  # 创建特性分支
# 开发工作...
git checkout master                          # 切换到主分支
git merge feature/unity-package-fixes       # 合并特性分支
git branch -d feature/unity-package-fixes   # 删除已合并分支
```

### 分支命名规范
```
feature/功能描述      # 新功能开发
fix/问题描述         # 问题修复  
hotfix/紧急修复     # 紧急修复
release/版本号      # 版本发布准备
```

## 📅 版本号和日期管理

### 版本号规范 (Semantic Versioning)
```
主版本号.次版本号.修订号

1.0.0 -> 1.0.1  # 修复bug
1.0.1 -> 1.1.0  # 新增功能
1.1.0 -> 2.0.0  # 破坏性变更
```

### 日期格式标准化
```bash
# ❌ 错误的日期处理
echo "## [1.0.1] - 2024-12-28"  # 硬编码错误日期

# ✅ 正确的日期处理  
current_date=$(date +%Y-%m-%d)
echo "## [1.0.1] - $current_date"

# 示例输出: ## [1.0.1] - 2025-08-08
```

### CHANGELOG.md 管理
```markdown
# 更新日志

## [1.0.4] - 2025-08-08

### 修复
- 🔧 确保所有必要的.meta文件包含在Unity Package中
- 📋 在package.json的files字段中明确指定.meta文件

### 改进  
- ✅ Unity Package现在包含所有必要的元数据文件
- 🎯 完全符合Unity Package规范

## [1.0.3] - 2025-08-08
...
```

## 🏷️ Git标签管理

### 标签创建规范
```bash
# 创建带注释的标签 (推荐)
git tag -a "v1.0.4" -m "EZ Logger v1.0.4 - 修复Unity Package中.meta文件缺失问题"

# 推送标签到远程
git push origin v1.0.4

# 推送所有标签
git push origin --tags
```

### 标签命名约定
```
v1.0.0    # 发布版本标签
v1.0.0-rc1  # 候选版本
v1.0.0-beta1  # 测试版本
v1.0.0-alpha1  # 内测版本
```

## 🗂️ 文件管理策略

### .gitignore 分层管理
```bash
# 全局忽略 (操作系统级别)
.DS_Store
Thumbs.db

# 项目忽略 (Unity项目级别)  
Library/
Temp/
Logs/

# 包开发忽略 (Unity Package级别)
DevTools/
Build/
package-build.json
```

### .gitattributes 导出控制
```bash
# Unity Package Manager export控制
DevTools/ export-ignore
Build/ export-ignore  
.cursor/ export-ignore
package-build.json export-ignore
.gitignore export-ignore
.gitattributes export-ignore
```

## 🔄 提交工作流

### 提交信息规范
```bash
# 格式: <type>(<scope>): <description>
# 类型: feat, fix, docs, style, refactor, test, chore

git commit -m "feat(unity): 添加Unity LogType对齐支持"
git commit -m "fix(package): 修复.meta文件缺失警告"  
git commit -m "docs(readme): 更新安装说明"
git commit -m "chore(build): 移除构建配置文件"
```

### 提交前检查清单
```bash
#!/bin/bash
# pre-commit-check.sh

echo "🔍 提交前检查..."

# 1. 检查是否在正确分支
current_branch=$(git branch --show-current)
if [ "$current_branch" = "master" ]; then
    echo "⚠️  警告: 直接在master分支提交，建议使用特性分支"
fi

# 2. 检查暂存区状态
if [ -z "$(git diff --cached --name-only)" ]; then
    echo "❌ 没有文件被暂存，请先 git add"
    exit 1
fi

# 3. 检查Unity Package相关文件
if git diff --cached --name-only | grep -q "package.json"; then
    echo "📦 检测到package.json更改，请确认版本号正确"
fi

# 4. 检查CHANGELOG.md日期
if git diff --cached --name-only | grep -q "CHANGELOG.md"; then
    today=$(date +%Y-%m-%d)
    if ! grep -q "$today" CHANGELOG.md; then
        echo "📅 警告: CHANGELOG.md可能包含错误日期，今天是: $today"
    fi
fi

echo "✅ 检查完成"
```

## 🚀 发布工作流

### 版本发布流程
```bash
#!/bin/bash
# release.sh

VERSION=$1
if [ -z "$VERSION" ]; then
    echo "用法: ./release.sh 1.0.4"
    exit 1
fi

echo "🚀 发布 EZ Logger v$VERSION"

# 1. 确保在master分支
git checkout master
git pull origin master

# 2. 更新版本文件
today=$(date +%Y-%m-%d)
sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json

# 3. 更新CHANGELOG.md (手动编辑后运行)
echo "📝 请手动更新CHANGELOG.md，然后按Enter继续..."
read

# 4. 提交版本更改
git add package.json CHANGELOG.md
git commit -m "🚀 v$VERSION: 版本发布"

# 5. 创建标签
git tag -a "v$VERSION" -m "EZ Logger v$VERSION"

# 6. 推送到远程
git push origin master
git push origin "v$VERSION"

echo "✅ v$VERSION 发布完成!"
echo "🔗 GitHub: https://github.com/summer198971/EZLogger.git"
echo "📦 Unity Package Manager: https://github.com/summer198971/EZLogger.git#v$VERSION"
```

## 🔍 问题排查

### 常见Git问题

#### 1. 误提交到错误分支
```bash
# 撤销最近的提交但保留更改
git reset --soft HEAD~1

# 切换到正确分支
git checkout correct-branch
git commit -m "正确的提交信息"
```

#### 2. 标签创建错误
```bash
# 删除本地标签
git tag -d v1.0.4

# 删除远程标签
git push origin :refs/tags/v1.0.4

# 重新创建正确标签
git tag -a "v1.0.4" -m "正确的标签信息"
git push origin v1.0.4
```

#### 3. 合并冲突处理
```bash
# 查看冲突文件
git status

# 手动解决冲突后
git add .
git commit -m "解决合并冲突"
```

## 📋 每日检查清单

### 开发开始前:
- [ ] `git status` - 检查工作区状态
- [ ] `git branch` - 确认当前分支
- [ ] `git pull origin master` - 同步最新代码

### 开发完成后:
- [ ] 运行测试确保功能正常
- [ ] 检查CHANGELOG.md日期是否正确
- [ ] 确认package.json版本号已更新
- [ ] 提交信息遵循规范
- [ ] 推送前创建pull request (如果使用)

### 版本发布前:
- [ ] 所有测试通过
- [ ] CHANGELOG.md包含当前版本信息
- [ ] package.json版本号正确
- [ ] Git标签遵循命名规范
- [ ] 在干净Unity项目中测试安装

这些规则将帮助避免重复犯错，保持项目的质量和一致性。