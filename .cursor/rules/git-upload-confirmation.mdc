---
description: "Git上传确认机制 - 防止意外上传未验证的代码"
alwaysApply: true
---

# Git 上传确认机制

防止在未经用户明确确认的情况下自动执行Git上传操作。

## 🛡️ 核心原则

### 上传前必须确认
**任何涉及向远程仓库推送代码的操作都必须先获得用户确认**

包括但不限于:
- `git push`
- `git push origin [branch]`
- `git push --tags`
- `git push origin --tags`
- `git push --force`
- 任何包含推送操作的脚本或复合命令

## 🚨 强制确认流程

### 1. 检测Git上传意图
当用户的请求可能涉及Git上传时，AI必须:

1. **暂停执行** - 不立即执行任何push命令
2. **显示计划** - 明确说明将要执行的Git操作
3. **请求确认** - 询问用户是否确认要上传

### 2. 确认对话模板
```
🔍 检测到Git上传操作

将要执行的操作:
- git add [文件列表]
- git commit -m "[提交信息]"
- git push origin [分支名]

📋 上传前检查清单:
- [ ] 已验证代码更改内容
- [ ] 提交信息准确描述更改
- [ ] 目标分支正确
- [ ] 测试通过(如适用)

❓ 是否确认执行Git上传？
请回复 "确认上传" 或明确的上传指令才会执行推送操作。
```

### 3. 用户确认触发词
只有当用户明确使用以下关键词时才执行上传:

**明确确认词汇:**
- "确认上传"
- "执行上传" 
- "推送代码"
- "git push"
- "上传到远程"
- "推送到GitHub"
- "发布代码"

**不被视为确认的词汇:**
- "好的"
- "继续"
- "执行"
- "可以"
- 仅仅是"是"

## 📋 上传前验证清单

### 自动检查项目
在用户确认上传前，AI应该提醒用户检查:

1. **代码质量**:
   ```bash
   git diff --cached  # 查看暂存的更改
   git status         # 确认文件状态
   ```

2. **提交信息**:
   - 是否遵循项目的提交信息规范
   - 是否准确描述了更改内容

3. **目标分支**:
   ```bash
   git branch --show-current  # 确认当前分支
   ```

4. **未跟踪文件**:
   - 检查是否有应该被忽略的文件被意外包含

### 特殊文件警告
如果检测到以下文件更改，必须特别提醒:

```bash
# 版本文件更改
package.json
CHANGELOG.md

# 配置文件更改  
*.config.js
*.env*
*.key
*.pem

# Unity特定文件
*.meta
*.asmdef
```

## 🔄 工作流示例

### 场景1: 用户要求提交并上传代码
```
用户: "帮我提交这些更改并推送到GitHub"

AI回应:
🔍 检测到Git上传请求

准备执行的操作:
1. git add [修改的文件]
2. git commit -m "[生成的提交信息]"  
3. git push origin [当前分支]

⚠️ 上传前请确认:
- 代码更改: [显示主要更改概述]
- 提交信息: "[提交信息预览]"
- 目标分支: [分支名]

❓ 是否确认执行Git上传？
请明确回复"确认上传"以继续。
```

### 场景2: 用户明确要求上传
```
用户: "确认上传"

AI回应:
✅ 用户已确认，开始执行Git上传操作...
[执行git命令]
🚀 代码已成功推送到远程仓库
```

## ⚠️ 特殊情况处理

### 1. 强制推送警告
如果涉及 `--force` 参数:
```
🚨 危险操作警告！

检测到强制推送操作，这可能:
- 覆盖远程仓库历史
- 影响其他开发者的工作
- 造成代码丢失

请再次确认您理解风险并输入: "确认强制推送"
```

### 2. 主分支推送警告
如果推送到 `master` 或 `main` 分支:
```
⚠️  主分支推送警告

即将推送到主分支 [master/main]
建议使用特性分支进行开发后创建PR

是否确认直接推送到主分支？
```

### 3. 大量文件更改警告
如果超过一定数量的文件被修改:
```
📊 大量文件更改检测

本次提交包含 [X] 个文件的更改
建议分批提交以便更好地跟踪更改

文件列表:
[显示前10个文件...]

是否确认一次性提交所有更改？
```

## 🔧 实现要点

### 1. AI行为要求
- **永远不要**在没有明确用户确认的情况下执行git push
- **必须**在每次push前显示完整的操作计划
- **应该**提供上传前检查清单
- **可以**执行git add和git commit，但push必须确认

### 2. 错误处理
如果用户提供了模糊的确认:
```
❓ 请明确确认

您的回复"[用户回复]"不够明确
请使用明确的确认词汇如"确认上传"
或者说明您想取消操作
```

### 3. 取消操作
用户可以随时取消:
```
用户: "取消" / "不上传" / "等等"

AI回应:
✅ 已取消Git上传操作
代码已提交到本地，但未推送到远程仓库
您可以稍后手动执行: git push origin [分支名]
```

## 🎯 目标效果

通过这个确认机制:
- ✅ 防止意外上传未验证的代码
- ✅ 确保用户了解将要上传的内容
- ✅ 提供上传前的最后检查机会
- ✅ 保持Git历史的整洁性
- ✅ 减少因误操作导致的问题

**记住**: 代码安全比便利性更重要，宁可多一步确认，也不要冒险自动上传。